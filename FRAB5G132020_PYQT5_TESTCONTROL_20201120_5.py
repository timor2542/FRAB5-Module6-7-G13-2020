# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\KRITTAMETX64\PycharmProjects\dsPIC33FTest1\FRAB5G132020_PYQT5_TESTCONTROL_20201120_5.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
import serial


def high_byte(_num):
    return int((int(_num) >> 8) & 0xFF)


def low_byte(_num):
    return int(int(_num) & 0xFF)


class Ui_MainWindow(object):

    def __init__(self):
        self.ser = serial.Serial()
        self.COM_PORT = ""
        self.COM_PORT_TXT = ""

        self.posx = 0
        self.posz = 0
        self.posy = 0
        self.sv1_angle = 0
        self.sv2_angle = 0
        # self.ID = 0
        self.port_connected = False
        #self.send_mode = ''

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        #MainWindow.resize(1355, 643)
        MainWindow.setFixedSize(1355, 643)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.centralwidget.setFont(font)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(50, 130, 1151, 22))
        self.horizontalSlider.setMaximum(1300)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.valueChanged[int].connect(self.updateposx)
        self.horizontalSlider.valueChanged.connect(self.updateLCDX)
        self.lcdNumber = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber.setGeometry(QtCore.QRect(1220, 110, 91, 51))
        self.lcdNumber.setSmallDecimalPoint(False)
        self.lcdNumber.setProperty("value", 0.0)
        self.lcdNumber.setObjectName("lcdNumber")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 100, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(50, 60, 82, 17))
        self.radioButton.setAutoRepeat(False)
        self.radioButton.setObjectName("radioButton")
        self.lcdNumber_2 = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_2.setGeometry(QtCore.QRect(1220, 200, 91, 51))
        self.lcdNumber_2.setProperty("value", 0.0)
        self.lcdNumber_2.setObjectName("lcdNumber_2")
        self.horizontalSlider_2 = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider_2.setGeometry(QtCore.QRect(50, 220, 1151, 22))
        self.horizontalSlider_2.setMaximum(1200)
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.horizontalSlider_2.valueChanged[int].connect(self.updateposz)
        self.horizontalSlider_2.valueChanged.connect(self.updateLCDZ)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(50, 190, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lcdNumber_3 = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_3.setGeometry(QtCore.QRect(1220, 290, 91, 51))
        self.lcdNumber_3.setProperty("value", 0.0)
        self.lcdNumber_3.setObjectName("lcdNumber_3")
        self.horizontalSlider_3 = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider_3.setGeometry(QtCore.QRect(50, 310, 1151, 22))
        self.horizontalSlider_3.setMaximum(60)
        self.horizontalSlider_3.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_3.setObjectName("horizontalSlider_3")
        self.horizontalSlider_3.valueChanged[int].connect(self.updateposy)
        self.horizontalSlider_3.valueChanged.connect(self.updateLCDY)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(50, 280, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.radioButton_2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(130, 60, 82, 17))
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_3.setGeometry(QtCore.QRect(210, 60, 82, 17))
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_4 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_4.setGeometry(QtCore.QRect(290, 60, 121, 17))
        self.radioButton_4.setObjectName("radioButton_4")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(20, 30, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.radioButton_5 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_5.setGeometry(QtCore.QRect(420, 60, 121, 17))
        self.radioButton_5.setObjectName("radioButton_5")
        self.lcdNumber_4 = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_4.setGeometry(QtCore.QRect(1220, 380, 91, 51))
        self.lcdNumber_4.setProperty("value", 0.0)
        self.lcdNumber_4.setObjectName("lcdNumber_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(50, 370, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalSlider_4 = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider_4.setGeometry(QtCore.QRect(50, 400, 1151, 22))
        self.horizontalSlider_4.setMaximum(180)
        self.horizontalSlider_4.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_4.setObjectName("horizontalSlider_4")
        self.horizontalSlider_4.valueChanged[int].connect(self.updatesvp)
        self.horizontalSlider_4.valueChanged.connect(self.updateLCDSVP)
        self.lcdNumber_5 = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_5.setGeometry(QtCore.QRect(1220, 470, 91, 51))
        self.lcdNumber_5.setProperty("value", 0.0)
        self.lcdNumber_5.setObjectName("lcdNumber_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(50, 460, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.horizontalSlider_5 = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider_5.setGeometry(QtCore.QRect(50, 490, 1151, 22))
        self.horizontalSlider_5.setMaximum(180)
        self.horizontalSlider_5.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_5.setObjectName("horizontalSlider_5")
        self.horizontalSlider_5.valueChanged[int].connect(self.updatesvr)
        self.horizontalSlider_5.valueChanged.connect(self.updateLCDSVR)
        self.radioButton_6 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_6.setGeometry(QtCore.QRect(550, 60, 101, 17))
        self.radioButton_6.setObjectName("radioButton_6")
        self.radioButton_7 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_7.setGeometry(QtCore.QRect(670, 60, 101, 17))
        self.radioButton_7.setObjectName("radioButton_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(600, 530, 321, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(710, 560, 101, 51))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.uart1_connect)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(1100, 560, 211, 51))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.send_data_command)
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(990, 530, 321, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(20, 590, 401, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(600, 560, 101, 51))
        self.plainTextEdit.setMouseTracking(True)
        self.plainTextEdit.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.plainTextEdit.setFrameShadow(QtWidgets.QFrame.Plain)
        self.plainTextEdit.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.plainTextEdit.setBackgroundVisible(False)
        self.plainTextEdit.setCenterOnScroll(False)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.plainTextEdit.textChanged.connect(self.updatestrcomport)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(820, 560, 101, 51))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.uart1_disconnect)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(990, 560, 101, 51))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.set_home_command)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "dsPIC33FJ64MC802 and Python UART Communication"))
        self.label.setText(_translate("MainWindow", "X"))
        self.radioButton.setText(_translate("MainWindow", "XZ"))
        self.label_2.setText(_translate("MainWindow", "Z"))
        self.label_3.setText(_translate("MainWindow", "Y"))
        self.radioButton_2.setText(_translate("MainWindow", "Y"))
        self.radioButton_3.setText(_translate("MainWindow", "XZY"))
        self.radioButton_4.setText(_translate("MainWindow", "SERVO PICK UP"))
        self.label_4.setText(_translate("MainWindow", "MODE"))
        self.radioButton_5.setText(_translate("MainWindow", "SERVO ROTATE"))
        self.label_5.setText(_translate("MainWindow", "SERVO PICK UP"))
        self.label_6.setText(_translate("MainWindow", "SERVO ROTATE"))
        self.radioButton_6.setText(_translate("MainWindow", "TWO SERVO"))
        self.radioButton_7.setText(_translate("MainWindow", "ALL"))
        self.label_8.setText(_translate("MainWindow", "SERIAL PORT"))
        self.pushButton.setText(_translate("MainWindow", "Connect"))
        self.pushButton_2.setText(_translate("MainWindow", "Send Data to dsPIC33FJ64MC802"))
        self.label_9.setText(_translate("MainWindow", "COMMAND"))
        self.label_10.setText(_translate("MainWindow", "Rev.20201124 11:48 AM FRAB#5 GROUP 13 MODULE 6-7 2020"))
        self.plainTextEdit.setPlaceholderText(_translate("MainWindow", "COM?"))
        self.pushButton_3.setText(_translate("MainWindow", "Disconnect"))
        self.pushButton_4.setText(_translate("MainWindow", "Set Home"))

    def updateLCDX(self, event):
        self.lcdNumber.display(event)

    def updateLCDZ(self, event):
        self.lcdNumber_2.display(event)

    def updateLCDY(self, event):
        self.lcdNumber_3.display(event)

    def updateLCDSVP(self, event):
        self.lcdNumber_4.display(event)

    def updateLCDSVR(self, event):
        self.lcdNumber_5.display(event)

    def updateposx(self, value):
        self.posx = int(value)
        print("X:", self.posx)

    def updateposz(self, value):
        self.posz = int(value)
        print("Z:", self.posz)

    def updateposy(self, value):
        self.posy = int(value)
        print("Y:", self.posy)

    def updatesvp(self, value):
        self.sv1_angle = int(value)
        print("SERVO ANGLE PICK UP:", self.sv1_angle)

    def updatesvr(self, value):
        self.sv2_angle = int(value)
        print("SERVO ANGLE ROTATE:", self.sv2_angle)

    def updatestrcomport(self):
        self.COM_PORT_TXT = str(self.plainTextEdit.toPlainText())
        print("Serial Port:", self.COM_PORT_TXT)

    def uart1_connect(self):
        if not self.port_connected:
            if 'COM' in self.COM_PORT_TXT:
                self.COM_PORT = self.COM_PORT_TXT
                try:
                    self.ser.baudrate = 115200
                    self.ser.port = self.COM_PORT
                    self.ser.timeout = None
                    self.ser.rts = 0
                    self.ser.open()  # Open serial port

                    # print port open or close
                    if self.ser.isOpen():
                        print('Connected:', self.ser.portstr)
                        self.port_connected = True
                except serial.serialutil.SerialException:
                    print("Warning: Serial Port", self.COM_PORT, "is not connected.")
        else:
            if 'COM' in self.COM_PORT:
                print("Warning:", self.COM_PORT, "is being opened.")

    def uart1_disconnect(self):
        if self.port_connected:
            try:
                self.ser.close()  # Close serial port
                print('Disconnected:', self.COM_PORT)
                self.port_connected = False
            except serial.serialutil.SerialException:
                print("Warning: Unable to disconnect Serial Port", self.COM_PORT, ".")
        else:
            if 'COM' in self.COM_PORT:
                print("Warning:", self.COM_PORT, "is not opened.")

    def set_home_command(self):
        data = serial.to_bytes([0x46, 0x58, 0x00, 0x00,
                                0x5A, 0x00, 0x00,
                                0x59, 0x00, 0x00,
                                0x50, 0x5A, 0x52, 0x5A, 0x53])
        print("SET HOME")
        print("Passcode: ", data)
        if self.port_connected:
            self.ser.write(data)
            print(self.ser.readline().decode())
        else:
            print("Warning: Serial Port", self.COM_PORT, "is not opened.")

    def send_data_command(self):
        if self.radioButton.isChecked():
            data = serial.to_bytes(
                [0x46, 0x58, high_byte(self.posx), low_byte(self.posx), 0x5A, high_byte(self.posz),
                 low_byte(self.posz), 0x53])
            print("X:", self.posx, "Z:", self.posz)
            print("Passcode: ", data)
            if self.port_connected:
                self.ser.write(data)
                print(self.ser.readline().decode())
            else:
                print("Warning: Serial Port", self.COM_PORT, "is not opened.")
        elif self.radioButton_2.isChecked():
            data = serial.to_bytes([0x46, 0x59, high_byte(self.posy), low_byte(self.posy), 0x53])
            print("Y:", self.posy)
            print("Passcode: ", data)
            if self.port_connected:
                self.ser.write(data)
                print(self.ser.readline().decode())
            else:
                print("Warning: Serial Port", self.COM_PORT, "is not opened.")
        elif self.radioButton_3.isChecked():
            data = serial.to_bytes([0x46, 0x58, high_byte(self.posx), low_byte(self.posx),
                                    0x5A, high_byte(self.posz), low_byte(self.posz),
                                    0x59, high_byte(self.posy), low_byte(self.posy), 0x53])
            print("X:", self.posx, "Z:", self.posz, "Y:", self.posy)
            print("Passcode: ", data)
            if self.port_connected:
                self.ser.write(data)
                print(self.ser.readline().decode())
            else:
                print("Warning: Serial Port", self.COM_PORT, "is not opened.")
        elif self.radioButton_4.isChecked():
            data = serial.to_bytes([0x46, 0x50, low_byte(self.sv1_angle), 0x53])
            print("SERVO ANGLE PICKUP:", self.sv1_angle)
            print("Passcode: ", data)
            if self.port_connected:
                self.ser.write(data)
                print(self.ser.readline().decode())
            else:
                print("Warning: Serial Port", self.COM_PORT, "is not opened.")
        elif self.radioButton_5.isChecked():
            data = serial.to_bytes([0x46, 0x52, low_byte(self.sv2_angle), 0x53])
            print("SERVO ANGLE ROTATE:", self.sv2_angle)
            print("Passcode: ", data)
            if self.port_connected:
                self.ser.write(data)
                print(self.ser.readline().decode())
            else:
                print("Warning: Serial Port", self.COM_PORT, "is not opened.")
        elif self.radioButton_6.isChecked():
            data = serial.to_bytes([0x46, 0x50, low_byte(self.sv1_angle), 0x52, low_byte(self.sv2_angle), 0x53])
            print("SERVO ANGLE PICKUP:", self.sv1_angle, "SERVO ANGLE ROTATE:", self.sv2_angle)
            print("Passcode: ", data)
            if self.port_connected:
                self.ser.write(data)
                print(self.ser.readline().decode())
            else:
                print("Warning: Serial Port", self.COM_PORT, "is not opened.")
        elif self.radioButton_7.isChecked():
            data = serial.to_bytes([0x46, 0x58, high_byte(self.posx), low_byte(self.posx),
                                    0x5A, high_byte(self.posz), low_byte(self.posz),
                                    0x59, high_byte(self.posy), low_byte(self.posy),
                                    0x50, low_byte(self.sv1_angle), 0x52, low_byte(self.sv2_angle), 0x53])
            print("ALL")
            print("X:", self.posx, "Z:", self.posz, "Y:", self.posy, "SERVO ANGLE PICKUP:", self.sv1_angle,
                  "SERVO ANGLE ROTATE:", self.sv2_angle)
            print("Passcode: ", data)
            if self.port_connected:
                self.ser.write(data)
                print(self.ser.readline().decode())
            else:
                print("Warning: Serial Port", self.COM_PORT, "is not opened.")


if __name__ == "__main__":
    # import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
